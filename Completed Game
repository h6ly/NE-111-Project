'''
Project Members
Hudson Ly - ID#: 20959975, Initial HL
John Litschko - ID#: 20963128, Initial JL
Jonathan Tuling - ID#: 20953504, Initial JT
Peyton Diebolt - ID#: 20975271, Initial PD
'''

import random, sys, time, math, pygame #Imports all the needed libraries in one line. -JL
from pygame.locals import * #Imports the whole library so it doesn't need to be referenced. - JL

FPS = 30 # frames per second to update the screen
WINWIDTH = 640 # width of the program's window, in pixels
WINHEIGHT = 480 # height in pixels
HALF_WINWIDTH = int(WINWIDTH / 2)
HALF_WINHEIGHT = int(WINHEIGHT / 2)
res = (640,480) # sets screen resolution
screen = pygame.display.set_mode(res) # opens up a window

OCEAN = (106, 159, 240) # Colour of the background. - JL
WHITE = (255, 255, 255) # Colour of the text. -JL
RED = (255, 0, 0) # Colour of the health. - JL
WIN = (104, 238, 104) # Colour of the winning text. - JL
colour_light = (170,170,170) 
colour_dark = (100,100,100) 


width = screen.get_width()  #stores screen width
height = screen.get_height() #stores screen height
CAMERASLACK = 90     # how far from the center the crab moves before moving the camera
MOVERATE = 9         # how fast the player moves
BOUNCERATE = 6       # how fast the player bounces (large is slower)
BOUNCEHEIGHT = 30    # how high the player bounces
STARTSIZE = 25       # how big the player starts off
WINSIZE = 300        # how big the player needs to be to win
INVULNTIME = 2       # how long the player is invulnerable after being hit in seconds
GAMEOVERTIME = 4     # how long the "game over" text stays on the screen in seconds
MAXHEALTH = 3   # how much health the player starts with

NUMGRASS = 80        # number of grass objects in the active area
NUMCRABS = 30    # number of crabs in the active area
CRABMINSPEED = 3 # slowest crab speed
CRABMAXSPEED = 9 # fastest crab speed
DIRCHANGEFREQ = 2    # % chance of direction change per frame
LEFT = 'left'
RIGHT = 'right'

"""
This program has three data structures to represent the player, enemy crabs, and grass background objects (that are not actually grass). The data structures are dictionaries with the following keys:

Keys used by all three data structures:
    'x' - the left edge coordinate of the object in the game world (not a pixel coordinate on the screen)
    'y' - the top edge coordinate of the object in the game world (not a pixel coordinate on the screen)
    'rect' - the pygame.Rect object representing where on the screen the object is located.
Player data structure keys:
    'surface' - the pygame.Surface object that stores the image of the crab which will be drawn to the screen.
    'facing' - either set to LEFT or RIGHT, stores which direction the player is facing.
    'size' - the width and height of the player in pixels. (The width & height are always the same.)
    'bounce' - represents at what point in a bounce the player is in. 0 means standing (no bounce), up to BOUNCERATE (the completion of the bounce)
    'health' - an integer showing how many more times the player can be hit by a larger crab before dying.
Enemy Crab data structure keys:
    'surface' - the pygame.Surface object that stores the image of the crab which will be drawn to the screen.
    'movex' - how many pixels per frame the crab moves horizontally. A negative integer is moving to the left, a positive to the right.
    'movey' - how many pixels per frame the crab moves vertically. A negative integer is moving up, a positive moving down.
    'width' - the width of the crab's image, in pixels
    'height' - the height of the crab's image, in pixels
    'bounce' - represents at what point in a bounce the player is in. 0 means standing (no bounce), up to BOUNCERATE (the completion of the bounce)
    'bouncerate' - how quickly the crab bounces. A lower number means a quicker bounce.
    'bounceheight' - how high (in pixels) the crab bounces
Grass data structure keys:
    'grassImage' - an integer that refers to the index of the pygame.Surface object in GRASSIMAGES used for this grass object
"""

def main():
    global FPSCLOCK, DISPLAYSURF, BASICFONT, GRASSIMAGES, L_CRABS_IMG, R_CRABS_IMG, L_FISH_IMG, R_FISH_IMG #References variables outside of the function or designates variables to not be limited
                                                                                                             # to the function's space. -JL
    pygame.init() #Initializes all of the imported pygame modules. -JL
    FPSCLOCK = pygame.time.Clock() #Creates clock object to track time. -JL
    pygame.display.set_icon(pygame.image.load('gameicon.png')) # Pretty self-explanatory. Displays the game icon. - JL
    DISPLAYSURF = pygame.display.set_mode((WINWIDTH, WINHEIGHT))
    pygame.display.set_caption('Fish Game')
    BASICFONT = pygame.font.Font('freesansbold.ttf', 32)

    # rendering a text written in 
    # this font 
    text1 = BASICFONT.render('Survival' , True , WHITE)
    text2 = BASICFONT.render('Quit' , True , WHITE)
    text3 = BASICFONT.render('Play' , True , WHITE)
    
    # Loads the image files into the game. -JL
    L_CRABS_IMG = pygame.image.load("CRABS.png")
    R_CRABS_IMG = pygame.transform.flip(L_CRABS_IMG, True, False)
    L_FISH_IMG = pygame.image.load('fish.png')
    R_FISH_IMG = pygame.transform.flip(L_FISH_IMG, True, False) # Reflects the image. -JL
    GRASSIMAGES = []
    for i in range(1, 5): # Creates a loop that adds all files that start with grass. -JL 
        GRASSIMAGES.append(pygame.image.load('grass%s.png' % i)) # Adds an image to the array "GRASSIMAGES". - JL

    while True: # While true is a way of making the program loop forever. -JL
        screen.fill((106, 159, 181)) 
        
        for ev in pygame.event.get(): 
          
            if ev.type == pygame.QUIT: 
                pygame.quit() 
              
            #checks if the mouse is clicked - JT 
            if ev.type == pygame.MOUSEBUTTONDOWN: 
              
                #if quit button is clicked game is closed - JT
                if width/2.5 <= mouse[0] <= width/2.5+100 and height/2 <= mouse[1] <= height/2+40: 
                    pygame.quit() 
                
                #if survival button is clicked survival plays - JT
                if width/1.85 <= mouse[0] <= width/1.85+180 and height/3 <= mouse[1] <= height/3+40: 
                    runSurvival() # Of course this line runs the survival function. - JL
               
                #if play button is pressed game is played - JT
                if width/4 <= mouse[0] <= width/4+180 and height/3 <= mouse[1] <= height/3+40: 
                    runGame() # Of course this line runs the game function. - JL 
                
        # stores the position of the mouse - JT
        mouse = pygame.mouse.get_pos()
        
        # boxes are created - JT
        # if mouse is on the box the colour of the rectangle becomes darker - JT
        if width/1.85 <= mouse[0] <= width/1.85+140 and height/3 <= mouse[1] <= height/3+40: 
            pygame.draw.rect(screen,colour_light,[width/1.85,height/3,180,40]) 
        else: 
            pygame.draw.rect(screen,colour_dark,[width/1.85,height/3,180,40]) 
      
        if width/2.5 <= mouse[0] <= width/2.5+100 and height/2 <= mouse[1] <= height/2+40: 
            pygame.draw.rect(screen,colour_light,[width/2.5,height/2,100,40]) 
        else: 
            pygame.draw.rect(screen,colour_dark,[width/2.5,height/2,100,40]) 
        
        if width/4 <= mouse[0] <= width/4+80 and height/3 <= mouse[1] <= height/3+40: 
            pygame.draw.rect(screen,colour_light,[width/4,height/3,100,40]) 
          
        else: 
            pygame.draw.rect(screen,colour_dark,[width/4,height/3,100,40])
    
        # Draws the text onto quit button - JT
        screen.blit(text2 , (width/2.5+15,height/2)) 
    
        # Draws the text onto Survival button - JT
        screen.blit(text1 , (width/1.85+20,height/3)) 
      
        # Draws the text onto play button - JT
        screen.blit(text3, (width/4+20,height/3))
    
        # updates the frames of the game - JT
        pygame.display.update()
        
def runGame():
    MAXHEALTH = 3        # how much health the player starts with
    # Sets variables for the start of a new game. -JL
    invulnerableMode = False  # if the player is invulnerable
    invulnerableStartTime = 0 # time the player became invulnerable
    gameOverMode = False      # if the player has lost
    gameOverStartTime = 0     # time the player lost
    winMode = False           # if the player has won

    # create the surfaces to hold game text
    gameOverSurf = BASICFONT.render('Game Over', True, WHITE) #Sets the text, font, and colour of the game over message. -JL
    gameOverRect = gameOverSurf.get_rect() #Creates a rectangle for the surface. - JL
    gameOverRect.center = (HALF_WINWIDTH, HALF_WINHEIGHT) #Sets the positition of the rectangle for the display of the text. -JL

    winSurf = BASICFONT.render('You won!', True, WIN) #Sets the text, font, and colour of the you won message. -JL
    winRect = winSurf.get_rect() #Creates a rectangle for the surface. -JL
    winRect.center = (HALF_WINWIDTH, HALF_WINHEIGHT) #Sets the position of the rectangle for the display of the text. -JL

    winSurf2 = BASICFONT.render('(Press "r" to return to Menu.)', True, WIN) #Sets the text, font, and colour of the game restart message. -JL
    winRect2 = winSurf2.get_rect() #Creates a rectangle for the surface. - JL
    winRect2.center = (HALF_WINWIDTH, HALF_WINHEIGHT + 30) #Sets the position of the rectangle for the display of the text. -JL

    # camerax and cameray are the top left of where the camera view is
    camerax = 0
    cameray = 0

    grassObjs = []    # stores all the grass objects in the game
    crabObjs = [] # stores all the non-player crab objects
    # stores the player object:
    playerObj = {'surface': pygame.transform.scale(L_FISH_IMG, (STARTSIZE, STARTSIZE)),
                 'facing': LEFT,
                 'size': STARTSIZE,
                 'x': HALF_WINWIDTH,
                 'y': HALF_WINHEIGHT,
                 'health': MAXHEALTH}

    moveLeft  = False
    moveRight = False
    moveUp    = False
    moveDown  = False

    # Start off with some random images on the screen. -JL
    for i in range(35): #Changed the range of the for loop so that more images are added onto the screen. -JL
        grassObjs.append(makeNewGrass(camerax, cameray))
        grassObjs[i]['x'] = random.randint(0, WINWIDTH)
        grassObjs[i]['y'] = random.randint(0, WINHEIGHT)

    while True: # main game loop
        # Check if we should turn off invulnerability
        if invulnerableMode and time.time() - invulnerableStartTime > INVULNTIME:
            invulnerableMode = False

        # move all the crabs
        for sObj in crabObjs:
            # Moves enemies. - JL
            sObj['x'] += sObj['movex']
            sObj['y'] += sObj['movey']
            # Deleted the bounce code for the enemies. Because crabs don't bounce! -JL

            # random chance they change direction
            if random.randint(0, 99) < DIRCHANGEFREQ:
                sObj['movex'] = getRandomVelocity()
                sObj['movey'] = getRandomVelocity()
                if sObj['movex'] > 0: # faces right
                    sObj['surface'] = pygame.transform.scale(R_CRABS_IMG, (sObj['width'], sObj['height']))
                else: # faces left
                    sObj['surface'] = pygame.transform.scale(L_CRABS_IMG, (sObj['width'], sObj['height']))


        # go through all the objects and see if any need to be deleted.
        for i in range(len(grassObjs) - 1, -1, -1):
            if isOutsideActiveArea(camerax, cameray, grassObjs[i]):
                del grassObjs[i]
        for i in range(len(crabObjs) - 1, -1, -1):
            if isOutsideActiveArea(camerax, cameray, crabObjs[i]):
                del crabObjs[i]

        # add more grass & crabs if we don't have enough.
        while len(grassObjs) < NUMGRASS:
            grassObjs.append(makeNewGrass(camerax, cameray))
        while len(crabObjs) < NUMCRABS:
            crabObjs.append(makeNewCrab(camerax, cameray))

        # adjust camerax and cameray if beyond the "camera slack"
        playerCenterx = playerObj['x'] + int(playerObj['size'] / 2)
        playerCentery = playerObj['y'] + int(playerObj['size'] / 2)
        if (camerax + HALF_WINWIDTH) - playerCenterx > CAMERASLACK:
            camerax = playerCenterx + CAMERASLACK - HALF_WINWIDTH
        elif playerCenterx - (camerax + HALF_WINWIDTH) > CAMERASLACK:
            camerax = playerCenterx - CAMERASLACK - HALF_WINWIDTH
        if (cameray + HALF_WINHEIGHT) - playerCentery > CAMERASLACK:
            cameray = playerCentery + CAMERASLACK - HALF_WINHEIGHT
        elif playerCentery - (cameray + HALF_WINHEIGHT) > CAMERASLACK:
            cameray = playerCentery - CAMERASLACK - HALF_WINHEIGHT

        # draw the green background
        DISPLAYSURF.fill(OCEAN)

        # draw all the grass objects on the screen
        for gObj in grassObjs:
            gRect = pygame.Rect( (gObj['x'] - camerax,
                                  gObj['y'] - cameray,
                                  gObj['width'],
                                  gObj['height']) )
            DISPLAYSURF.blit(GRASSIMAGES[gObj['grassImage']], gRect)


        # draw the other crabs
        for sObj in crabObjs:
            sObj['rect'] = pygame.Rect( (sObj['x'] - camerax,
                                         sObj['y'] - cameray - getBounceAmount(sObj['bounce'], sObj['bouncerate'], sObj['bounceheight']),
                                         sObj['width'],
                                         sObj['height']) )
            DISPLAYSURF.blit(sObj['surface'], sObj['rect'])


        # draw the player crab
        flashIsOn = round(time.time(), 1) * 10 % 2 == 1
        if not gameOverMode and not (invulnerableMode and flashIsOn):
            playerObj['rect'] = pygame.Rect( (playerObj['x'] - camerax,
                                              playerObj['y'] - cameray,
                                              playerObj['size'],
                                              playerObj['size']) )
            DISPLAYSURF.blit(playerObj['surface'], playerObj['rect'])


        # draw the health meter
        drawHealthMeter(playerObj['health'])

        for event in pygame.event.get(): # event handling loop
            if event.type == QUIT:
                terminate()

            elif event.type == KEYDOWN:
                if event.key in (K_UP, K_w):
                    moveDown = False
                    moveUp = True
                elif event.key in (K_DOWN, K_s):
                    moveUp = False
                    moveDown = True
                elif event.key in (K_LEFT, K_a):
                    moveRight = False
                    moveLeft = True
                    if playerObj['facing'] != LEFT: # change player image
                        playerObj['surface'] = pygame.transform.scale(L_FISH_IMG, (playerObj['size'], playerObj['size']))
                    playerObj['facing'] = LEFT
                elif event.key in (K_RIGHT, K_d):
                    moveLeft = False
                    moveRight = True
                    if playerObj['facing'] != RIGHT: # change player image
                        playerObj['surface'] = pygame.transform.scale(R_FISH_IMG, (playerObj['size'], playerObj['size']))
                    playerObj['facing'] = RIGHT
                elif winMode and event.key == K_r:
                    return

            elif event.type == KEYUP:
                # stop moving the player's crab
                if event.key in (K_LEFT, K_a):
                    moveLeft = False
                elif event.key in (K_RIGHT, K_d):
                    moveRight = False
                elif event.key in (K_UP, K_w):
                    moveUp = False
                elif event.key in (K_DOWN, K_s):
                    moveDown = False

                elif event.key == K_ESCAPE:
                    terminate()

        if not gameOverMode:
            # actually move the player
            if moveLeft:
                playerObj['x'] -= MOVERATE
            if moveRight:
                playerObj['x'] += MOVERATE
            if moveUp:
                playerObj['y'] -= MOVERATE
            if moveDown:
                playerObj['y'] += MOVERATE
                
              
            # check if the player has collided with any crabs
            for i in range(len(crabObjs)-1, -1, -1):
                sqObj = crabObjs[i]
                if 'rect' in sqObj and playerObj['rect'].colliderect(sqObj['rect']):
                    # a player/crab collision has occurred

                    if sqObj['width'] * sqObj['height'] <= playerObj['size']**2:
                        # player is larger and eats the crab
                        playerObj['size'] += int( (sqObj['width'] * sqObj['height'])**0.2 ) + 1
                        del crabObjs[i]

                        if playerObj['facing'] == LEFT:
                            playerObj['surface'] = pygame.transform.scale(L_FISH_IMG, (playerObj['size'], playerObj['size']))
                        if playerObj['facing'] == RIGHT:
                            playerObj['surface'] = pygame.transform.scale(R_FISH_IMG, (playerObj['size'], playerObj['size']))

                        if playerObj['size'] > WINSIZE:
                            winMode = True # turn on "win mode"

                    elif not invulnerableMode:
                        # player is smaller and takes damage
                        invulnerableMode = True
                        invulnerableStartTime = time.time()
                        playerObj['health'] -= 1
                        if playerObj['health'] == 0:
                            gameOverMode = True # turn on "game over mode"
                            gameOverStartTime = time.time()
        else:
            # game is over, show "game over" text
            DISPLAYSURF.blit(gameOverSurf, gameOverRect)
            if time.time() - gameOverStartTime > GAMEOVERTIME:
                return # end the current game

        # check if the player has won.
        if winMode:
            DISPLAYSURF.blit(winSurf, winRect)
            DISPLAYSURF.blit(winSurf2, winRect2)

        pygame.display.update()
        FPSCLOCK.tick(FPS)

        
        
        
def runSurvival():
    
    MAXHEALTH = 1   # how much health the player starts with
    # set up variables for the start of a new game
    invulnerableMode = False  # if the player is invulnerable
    invulnerableStartTime = 0 # time the player became invulnerable
    gameOverMode = False      # if the player has lost
    gameOverStartTime = 0     # time the player lost
    winMode = False          # if the player has won
    endtime = 0
    starttime = time.perf_counter()
    
    # create the surfaces to hold game text
    gameOverSurf = BASICFONT.render('You survived: ', True, WHITE) #Sets the text, font, and colour of the game over message. -JL
    gameOverRect = gameOverSurf.get_rect() #Creates a rectangle for the surface. - JL
    gameOverRect.center = (HALF_WINWIDTH, HALF_WINHEIGHT) #Sets the positition of the rectangle for the display of the text. -JL

    winSurf2 = BASICFONT.render('seconds', True, WHITE) #Sets the text, font, and colour of the game restart message. -JL
    winRect2 = winSurf2.get_rect() #Creates a rectangle for the surface. - JL
    winRect2.center = (HALF_WINWIDTH, HALF_WINHEIGHT+60) #Sets the position of the rectangle for the display of the text. -JL

    # camerax and cameray are the top left of where the camera view is
    camerax = 0
    cameray = 0

    grassObjs = []    # stores all the grass objects in the game
    crabObjs = [] # stores all the non-player crab objects
    # stores the player object:
    playerObj = {'surface': pygame.transform.scale(L_FISH_IMG, (STARTSIZE, STARTSIZE)),
                 'facing': LEFT,
                 'size': STARTSIZE,
                 'x': HALF_WINWIDTH,
                 'y': HALF_WINHEIGHT,
                 'health': MAXHEALTH}

    moveLeft  = False
    moveRight = False
    moveUp    = False
    moveDown  = False

    # start off with some random grass images on the screen
    for i in range(20): #Changed the range of the for loop so that more images are added onto the screen. -JL
        grassObjs.append(makeNewGrass(camerax, cameray))
        grassObjs[i]['x'] = random.randint(0, WINWIDTH)
        grassObjs[i]['y'] = random.randint(0, WINHEIGHT)

    while True: # main game loop
        # Check if we should turn off invulnerability
        if invulnerableMode and time.time() - invulnerableStartTime > INVULNTIME:
            invulnerableMode = False

        # move all the crabs
        for sObj in crabObjs:
            # Moves enemies. - JL
            sObj['x'] += sObj['movex']
            sObj['y'] += sObj['movey']
            # Deleted the bounce code for the enemies. Because crabs don't bounce! -JL

            # random chance they change direction
            if random.randint(0, 99) < DIRCHANGEFREQ:
                sObj['movex'] = getRandomVelocity()
                sObj['movey'] = getRandomVelocity()
                if sObj['movex'] > 0: # faces right
                    sObj['surface'] = pygame.transform.scale(R_CRABS_IMG, (sObj['width'], sObj['height']))
                else: # faces left
                    sObj['surface'] = pygame.transform.scale(L_CRABS_IMG, (sObj['width'], sObj['height']))


        # go through all the objects and see if any need to be deleted.
        for i in range(len(grassObjs) - 1, -1, -1):
            if isOutsideActiveArea(camerax, cameray, grassObjs[i]):
                del grassObjs[i]
        for i in range(len(crabObjs) - 1, -1, -1):
            if isOutsideActiveArea(camerax, cameray, crabObjs[i]):
                del crabObjs[i]

        # add more grass & crabs if we don't have enough.
        while len(grassObjs) < NUMGRASS:
            grassObjs.append(makeNewGrass(camerax, cameray))
        while len(crabObjs) < NUMCRABS:
            crabObjs.append(makeNewGiantCrab(camerax, cameray))

        # adjust camerax and cameray if beyond the "camera slack"
        playerCenterx = playerObj['x'] + int(playerObj['size'] / 2)
        playerCentery = playerObj['y'] + int(playerObj['size'] / 2)
        if (camerax + HALF_WINWIDTH) - playerCenterx > CAMERASLACK:
            camerax = playerCenterx + CAMERASLACK - HALF_WINWIDTH
        elif playerCenterx - (camerax + HALF_WINWIDTH) > CAMERASLACK:
            camerax = playerCenterx - CAMERASLACK - HALF_WINWIDTH
        if (cameray + HALF_WINHEIGHT) - playerCentery > CAMERASLACK:
            cameray = playerCentery + CAMERASLACK - HALF_WINHEIGHT
        elif playerCentery - (cameray + HALF_WINHEIGHT) > CAMERASLACK:
            cameray = playerCentery - CAMERASLACK - HALF_WINHEIGHT

        # draw the green background
        DISPLAYSURF.fill(OCEAN)

        # draw all the grass objects on the screen
        for gObj in grassObjs:
            gRect = pygame.Rect( (gObj['x'] - camerax,
                                  gObj['y'] - cameray,
                                  gObj['width'],
                                  gObj['height']) )
            DISPLAYSURF.blit(GRASSIMAGES[gObj['grassImage']], gRect)


        # draw the other crabs
        for sObj in crabObjs:
            sObj['rect'] = pygame.Rect( (sObj['x'] - camerax,
                                         sObj['y'] - cameray - getBounceAmount(sObj['bounce'], sObj['bouncerate'], sObj['bounceheight']),
                                         sObj['width'],
                                         sObj['height']) )
            DISPLAYSURF.blit(sObj['surface'], sObj['rect'])


        # draw the player crab
        flashIsOn = round(time.time(), 1) * 10 % 2 == 1
        if not gameOverMode and not (invulnerableMode and flashIsOn):
            playerObj['rect'] = pygame.Rect( (playerObj['x'] - camerax,
                                              playerObj['y'] - cameray,
                                              playerObj['size'],
                                              playerObj['size']) )
            DISPLAYSURF.blit(playerObj['surface'], playerObj['rect'])


        # draw the health meter
        drawHealthMeter(playerObj['health'])

        for event in pygame.event.get(): # event handling loop
            if event.type == QUIT:
                terminate()

            elif event.type == KEYDOWN:
                if event.key in (K_UP, K_w):
                    moveDown = False
                    moveUp = True
                elif event.key in (K_DOWN, K_s):
                    moveUp = False
                    moveDown = True
                elif event.key in (K_LEFT, K_a):
                    moveRight = False
                    moveLeft = True
                    if playerObj['facing'] != LEFT: # change player image
                        playerObj['surface'] = pygame.transform.scale(L_FISH_IMG, (playerObj['size'], playerObj['size']))
                    playerObj['facing'] = LEFT
                elif event.key in (K_RIGHT, K_d):
                    moveLeft = False
                    moveRight = True
                    if playerObj['facing'] != RIGHT: # change player image
                        playerObj['surface'] = pygame.transform.scale(R_FISH_IMG, (playerObj['size'], playerObj['size']))
                    playerObj['facing'] = RIGHT
                elif winMode and event.key == K_r:
                    return

            elif event.type == KEYUP:
                # stop moving the player's crab
                if event.key in (K_LEFT, K_a):
                    moveLeft = False
                elif event.key in (K_RIGHT, K_d):
                    moveRight = False
                elif event.key in (K_UP, K_w):
                    moveUp = False
                elif event.key in (K_DOWN, K_s):
                    moveDown = False

                elif event.key == K_ESCAPE:
                    terminate()

        if not gameOverMode:
            # actually move the player
            if moveLeft:
                playerObj['x'] -= MOVERATE
            if moveRight:
                playerObj['x'] += MOVERATE
            if moveUp:
                playerObj['y'] -= MOVERATE
            if moveDown:
                playerObj['y'] += MOVERATE
                
              
            # check if the player has collided with any crabs
            for i in range(len(crabObjs)-1, -1, -1):
                sqObj = crabObjs[i]
                if 'rect' in sqObj and playerObj['rect'].colliderect(sqObj['rect']):
                    # a player/crab collision has occurred

                    if sqObj['width'] * sqObj['height'] <= playerObj['size']**2:
                        # player is larger and eats the crab
                        playerObj['size'] += int( (sqObj['width'] * sqObj['height'])**0.2 ) + 1
                        del crabObjs[i]

                        if playerObj['facing'] == LEFT:
                            playerObj['surface'] = pygame.transform.scale(L_FISH_IMG, (playerObj['size'], playerObj['size']))
                        if playerObj['facing'] == RIGHT:
                            playerObj['surface'] = pygame.transform.scale(R_FISH_IMG, (playerObj['size'], playerObj['size']))

                    elif not invulnerableMode:
                        # player is smaller and takes damage
                        invulnerableMode = True
                        invulnerableStartTime = time.time()
                        playerObj['health'] -= 1
                        if playerObj['health'] == 0:
                            gameOverMode = True # turn on "game over mode"
                            gameOverStartTime = time.time()
                            endtime = time.perf_counter()
        
        else:
            display_time = str(round((endtime - starttime), 2))
            
            winSurf = BASICFONT.render(display_time, True, WHITE) #Sets the text, font, and colour of the you won message. -JL
            winRect = winSurf.get_rect() #Creates a rectangle for the surface. -JL
            winRect.center = (HALF_WINWIDTH, HALF_WINHEIGHT+30) #Sets the position of the rectangle for the display of the text. -JL
           
            # game is over, show "game over" text
            DISPLAYSURF.blit(gameOverSurf, gameOverRect)
            DISPLAYSURF.blit(winSurf, winRect)
            DISPLAYSURF.blit(winSurf2, winRect2)
            if time.time() - gameOverStartTime > GAMEOVERTIME:
                return # end the current game

        pygame.display.update()
        FPSCLOCK.tick(FPS)


def drawHealthMeter(currentHealth):
    for i in range(currentHealth): # draw red health bars
        pygame.draw.rect(DISPLAYSURF, RED,   (15, 5 + (10 * MAXHEALTH) - i * 10, 20, 10))
    for i in range(MAXHEALTH): # draw the white outlines
        pygame.draw.rect(DISPLAYSURF, WHITE, (15, 5 + (10 * MAXHEALTH) - i * 10, 20, 10), 1)


def terminate():
    pygame.quit()
    sys.exit()


def getBounceAmount(currentBounce, bounceRate, bounceHeight):
    # Returns the number of pixels to offset based on the bounce.
    # Larger bounceRate means a slower bounce.
    # Larger bounceHeight means a higher bounce.
    # currentBounce will always be less than bounceRate
    return int(math.sin( (math.pi / float(bounceRate)) * currentBounce ) * bounceHeight)

def getRandomVelocity():
    speed = random.randint(CRABMINSPEED, CRABMAXSPEED)
    if random.randint(0, 1) == 0:
        return speed
    else:
        return -speed


def getRandomOffCameraPos(camerax, cameray, objWidth, objHeight):
    # create a Rect of the camera view
    cameraRect = pygame.Rect(camerax, cameray, WINWIDTH, WINHEIGHT)
    while True:
        x = random.randint(camerax - WINWIDTH, camerax + (2 * WINWIDTH))
        y = random.randint(cameray - WINHEIGHT, cameray + (2 * WINHEIGHT))
        # create a Rect object with the random coordinates and use colliderect()
        # to make sure the right edge isn't in the camera view.
        objRect = pygame.Rect(x, y, objWidth, objHeight)
        if not objRect.colliderect(cameraRect):
            return x, y


def makeNewGiantCrab(camerax, cameray):
    sq = {}
    generalSize = random.randint(STARTSIZE+30, STARTSIZE+70)
    multiplier = random.randint(1, 3)
    sq['width']  = (generalSize + random.randint(0, 12)) * multiplier
    sq['height'] = (generalSize + random.randint(0, 12)) * multiplier
    sq['x'], sq['y'] = getRandomOffCameraPos(camerax, cameray, sq['width'], sq['height'])
    sq['movex'] = getRandomVelocity()
    sq['movey'] = getRandomVelocity()
    if sq['movex'] < 0: # crab is facing left
        sq['surface'] = pygame.transform.scale(L_CRABS_IMG, (sq['width'], sq['height']))
    else: # crab is facing right
        sq['surface'] = pygame.transform.scale(R_CRABS_IMG, (sq['width'], sq['height']))
    sq['bounce'] = 0
    sq['bouncerate'] = random.randint(10, 18)
    sq['bounceheight'] = random.randint(10, 50)
    return sq

def makeNewCrab(camerax, cameray):
    sq = {}
    generalSize = random.randint(STARTSIZE-20, STARTSIZE)
    multiplier = random.randint(1, 3)
    sq['width']  = (generalSize + random.randint(0, 10)) * multiplier
    sq['height'] = (generalSize + random.randint(0, 10)) * multiplier
    sq['x'], sq['y'] = getRandomOffCameraPos(camerax, cameray, sq['width'], sq['height'])
    sq['movex'] = getRandomVelocity()
    sq['movey'] = getRandomVelocity()
    if sq['movex'] < 0: # crab is facing left
        sq['surface'] = pygame.transform.scale(L_CRABS_IMG, (sq['width'], sq['height']))
    else: # crab is facing right
        sq['surface'] = pygame.transform.scale(R_CRABS_IMG, (sq['width'], sq['height']))
    sq['bounce'] = 0
    sq['bouncerate'] = random.randint(10, 18)
    sq['bounceheight'] = random.randint(10, 50)
    return sq

def makeNewGrass(camerax, cameray):
    gr = {}
    gr['grassImage'] = random.randint(0, len(GRASSIMAGES) - 1)
    gr['width']  = GRASSIMAGES[0].get_width()
    gr['height'] = GRASSIMAGES[0].get_height()
    gr['x'], gr['y'] = getRandomOffCameraPos(camerax, cameray, gr['width'], gr['height'])
    gr['rect'] = pygame.Rect( (gr['x'], gr['y'], gr['width'], gr['height']) )
    return gr


def isOutsideActiveArea(camerax, cameray, obj):
    # Return False if camerax and cameray are more than
    # a half-window length beyond the edge of the window.
    boundsLeftEdge = camerax - WINWIDTH
    boundsTopEdge = cameray - WINHEIGHT
    boundsRect = pygame.Rect(boundsLeftEdge, boundsTopEdge, WINWIDTH * 3, WINHEIGHT * 3)
    objRect = pygame.Rect(obj['x'], obj['y'], obj['width'], obj['height'])
    return not boundsRect.colliderect(objRect)


if __name__ == '__main__':
    main()
